【項目】
.npm rub build
.元件建立
.命名規則
.tailwind css
.拆分元件


【項目說明】
=== .npm rub build =======================================================
build出後的檔案夾『dist』需放進伺服器內才能執行。
伺服器路徑需至『vue.config.js』內設定以下資訊：

publicPath: process.env.NODE_ENV === 'production'
  ? '/(資料夾名稱)/dist'
  : '/'

*請替換( )內容並移除括號。

{範例}
伺服器位置為127.0.0.1，build出後的檔案需放到『test』資料夾內，因此變更為：

publicPath: process.env.NODE_ENV === 'production'
  ? '/test/dist'
  : '/'

瀏覽器輸入『127.0.0.1/test/dist/』即可瀏覽畫面。

可參考：https://cli.vuejs.org/zh/config/#publicpath


=== .元件建立 =======================================================
建立區塊化的模組，方便開發者取用。
每個區塊使用『<!--START: (區塊名稱) -->』及『<!-- END: (區塊名稱) -->』包夾。
預期應降低耦合，每組區塊皆有獨立的css或js設定，達到模組化組合概念。


=== .命名規則 =======================================================
依循BEM規範(Block + Element + Modifier)
Block：泛指區塊，如：header、nav...等
Element：泛指元素，如：header下的item...等
Modifier：泛指元素的作動狀態，如：header內的item目前正處於active狀態，可標記為『h__item--active』
區塊與元素間的連結使用『__』（兩道底線），元素與狀態間的連結使用『--』（兩道中線）
命名時須遵循父層子層關係
如碰到元素命名超過一個字時，使用『-』連結，如：header下的內容標記為『h__item-inner--active』
命名長度盡量以不超過三層為原則

js方法命名建議使用『動詞』為綴詞
以REST Style為例
get 取值：get_member(id) //取得編號id的會員
delete 刪除：delete_member(id) //刪除編號id的會員


=== .tailwind css =======================================================
本次專案導入css管理框架『tailwind css』
tailwind css 官網
英文：https://tailwindcss.com/docs/installation（已支援到v3.x.x）
中文：https://www.tailwindcss.cn/docs/installation（目前只支援到v2.x.x）

（定義）
tailwindcss：tailwind的主套件
postcss：css編譯打包套件
postcss-cli：postcss指令
autoprefixer：自動於部分css設定前加上瀏覽器前綴
postcss-import：避免import失敗的輔助套件


（兩種安裝方式）
a. 指令安裝
b. 手動安裝

--- a. 指令安裝 ---------------------------------------------------------------------
建立完vue專案後，繼續輸入指令『vue add tailwind』，則npm會自動幫我們安裝tailwind相關套件，包含：
01. assets > tailwind.css
02. tailwind.config.js
03. postcss.config.js

另外需再安裝：
01. npm install -D autoprefixer
02. npm install -D postcss-import
03. npm install -D postcss-cli

相關說明請參閱：
https://medium.com/coding-hot-pot/%E5%A6%82%E4%BD%95%E7%94%A8vue-cli-%E6%90%AD%E9%85%8Dtailwind-css%E9%96%8B%E7%99%BC-42c0f0dc3d3a


--- b. 手動安裝 ---------------------------------------------------------------------
打開終端機，安裝步驟如下：
(1)npm install -D tailwindcss postcss postcss-cli autoprefixer postcss-import
------------------------------------------------------------------------
(2)npx tailwind init --full
>>>
建立完整『tailwind.config.js』，並修改content設定：
content: ['./public/**/*.html', './src/**/*.{vue,js,ts,jsx,tsx}'],
上述設定代表src資料夾以下所有副檔名為『html』『vue』『js』『ts』『jsx』『tsx』檔案都套用tailwind設定
------------------------------------------------------------------------
(3)新增『postcss.config.js』，建立內容：
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}
  }
}
------------------------------------------------------------------------
(4)檔案設定
(4-1)
於『package.json』中的"script"內加入：
"build:css": "postcss src/css/tailwind.css -o src/css/basic.css"
>>>
其中『tailwind.css』及『basic.css』可依需求變更名稱及位置
『tailwind.css』檔案須先加入內容：
@tailwind base;
@tailwind components;
@tailwind utilities;

base：基礎
components：組件
utilities：功能

上述設定完成後，使用『npm run build:css』則會於css資料夾內自動產生『baisc.css』檔案，轉譯本次使用到的tailwind設定

(4-2)
於『App.vue』檔案內引入tailwind build出的css：
// tailwindcss postcss
import "./css/basic.css";
>>>
其中『basic.css』可依需求變更名稱及位置

（撰寫方法）
於html或vue的內容標籤直接使用tailwind定義的classname
如想設定粗體文字，則於div上加入『font-bold』，該div內容呈現文字粗體。
更多設定可參閱官網『layout』
https://tailwindcss.com/docs/aspect-ratio

目前設計可能為：tailwind + bem 的綜合撰寫方式

tailwind class撰寫順序建議：
01.寬度/長度設定（width/height）
02.內外距（margin/padding）
03.位置（position）
04.線框/圓角（border/border-radius）
05.文字（font）
06.背景（background）
07.其他（box-shadow...等）


最後才加入bem class，css設定撰寫於『customize.css』

自定義css內可使用『@apply (tailwind clsss)』定義物件樣式（不需在div上加tailwind class）
(範例)
在頁面上有個classname為『footer』的div，tailwind的寫法會將設定寫在div上
但如果使用@apply即可將設定寫在css檔案內，為：
.footer {
	@apply font-bold hover:bg-sky-100;
}

>> 文字呈現粗體，滑鼠滑入後footer區塊背景色變為淺藍色。
------------------------------------------------------------------------
＊一般css撰寫方法與@apply可混用
＊@apply層級大過行內設定
＊將分層清楚標記將可避免特定問題，如：
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  .btn-blue {
    @apply py-2 px-4 bg-blue-500 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75;
  }
}


@layer：自定義樣式應屬於哪個區間，包含：base、components、utilities，如：
@layer base {
  h1 {
    @apply text-2xl;
  }
  h2 {
    @apply text-xl;
  }
}
------------------------------------------------------------------------
@variants：宣告功能，包含：
@variants focus, hover {
  .rotate-0 {
    transform: rotate(0deg);
  }
  .rotate-90 {
    transform: rotate(90deg);
  }
}

css生成為
.rotate-0 {
  transform: rotate(0deg);
}
.rotate-90 {
  transform: rotate(90deg);
}

.focus\:rotate-0:focus {
  transform: rotate(0deg);
}
.focus\:rotate-90:focus {
  transform: rotate(90deg);
}

.hover\:rotate-0:hover {
  transform: rotate(0deg);
}
.hover\:rotate-90:hover {
  transform: rotate(90deg);
}
------------------------------------------------------------------------
自定義顏色方法
https://www.tailwindcss.cn/docs/customizing-colors

------------------------------------------------------------------------

=== .拆分元件 =======================================================
.App.vue：建立頁面主結構體，引入元件
.main.js：引入css/js
.靜態資源建議存放『assets』資料夾內，如：css/fonts/img
.a連結必須使用<router-link>，如：
<router-link :to="{ name: 'Page2' }">Page2</router-link>
>> 帶入『views』內的『Page2.vue』內容，其他結構不重新載入








